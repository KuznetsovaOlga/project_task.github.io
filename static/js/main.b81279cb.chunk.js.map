{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Main","styled","div","Input","input","Container","article","Post","PostTitle","h4","PostBody","p","PostIsAbsent","App","useState","posts","setPosts","postsNew","setPostsNew","users","setUsers","useEffect","axios","method","url","then","response","data","catch","err","console","log","postsVisible","length","map","item","user","find","userItem","id","userId","key","name","username","body","type","onChange","e","arr","filter","toLowerCase","search","target","value","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"q4CAMA,IAAMA,EAAOC,IAAOC,IAAV,KAIJC,EAAQF,IAAOG,MAAV,KAWLC,EAAYJ,IAAOK,QAAV,KAWTC,EAAON,IAAOC,IAAV,KAYJM,EAAYP,IAAOQ,GAAV,KAKTC,EAAWT,IAAOU,EAAV,KAIRC,EAAeX,IAAOU,EAAV,KAkEHE,MA5Df,WAAgB,IAAD,EAEYC,mBAAS,IAFrB,mBAEPC,EAFO,KAEAC,EAFA,OAGkBF,mBAAS,IAH3B,mBAGPG,EAHO,KAGGC,EAHH,OAIYJ,mBAAS,IAJrB,mBAIPK,EAJO,KAIAC,EAJA,KAMbC,qBAAU,WACRC,IAAM,CACJC,OAAQ,MACRC,IAAI,+CAELC,MAAK,SAAAC,GACJV,EAASU,EAASC,MAClBT,EAAYQ,EAASC,SAEtBC,OAAM,SAAAC,GACJC,QAAQC,IAAI,QAASF,MAGxBP,IAAM,CACJC,OAAQ,MACRC,IAAI,+CAELC,MAAK,SAAAC,GACJN,EAASM,EAASC,SAEnBC,OAAM,SAAAC,GACJC,QAAQC,IAAI,QAASF,QAExB,IAEF,IAOMG,EAAgC,IAAjBjB,EAAMkB,OAAgBlB,EAAMmB,KAAI,SAAAC,GACnD,IAAMC,EAAOjB,EAAMkB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAOJ,EAAKK,UACzD,OACE,kBAACjC,EAAD,CAAMkC,IAAKN,EAAKI,IACd,kBAAC/B,EAAD,KAAY4B,GAAQA,EAAKM,KAAzB,KAAiCN,GAAQA,EAAKO,SAA9C,KACA,kBAACjC,EAAD,KAAWyB,EAAKS,UAIlB,kBAAChC,EAAD,6CAGJ,OACE,kBAACZ,EAAD,KACE,kBAACG,EAAD,CAAO0C,KAAK,OAAOC,SArBE,SAACC,GACtB,IAAIC,EAAM/B,EAASgC,QAAO,SAAAd,GACtB,OAAwE,IAAjEA,EAAKS,KAAKM,cAAcC,OAAOJ,EAAEK,OAAOC,MAAMH,kBAEzDlC,EAASgC,IAiBuCM,YAAY,kCAC5D,kBAACjD,EAAD,KACK2B,KCrGSuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdzC,OAAM,SAAA0C,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.b81279cb.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styled from \"styled-components\";\nimport axios from 'axios';\n\nimport './App.css'\n\nconst Main = styled.div`\n  text-align:center;\n`;\n\nconst Input = styled.input`\n  font-size: 18px;\n  padding: 10px;\n  margin: 50px;\n  text-align: center;\n  border: none;\n  border-radius: 3px;\n  border: 1px solid #80808096;\n  width:50%;\n`;\n\nconst Container = styled.article`\n  margin-left: 10%;\n  margin-right: 10%;\n  max-width: 500px;\n  height: 520px;\n  overflow-y: scroll;\n  text-align: -webkit-center;\n  display: flex;\n  flex-direction:column;\n`;\n\nconst Post = styled.div`\n  border: 1px solid #80808096;\n  border-radius: 30px;\n  background: lightgray;\n  padding: 10px;\n  margin: 10px;\n  :hover {\n    background: darkgray;\n  }\n  cursor:pointer;\n`;\n\nconst PostTitle = styled.h4`\n  text-align:left;\n  padding-left:20px;\n`;\n\nconst PostBody = styled.p`\n  text-align:center;\n`;\n\nconst PostIsAbsent = styled.p`\n  text-align:center;\n  color:white;\n`;\n\n\nfunction App() {\n\n  const[posts, setPosts] = useState([]);\n  const[postsNew, setPostsNew] = useState([]);\n  const[users, setUsers] = useState([]);\n\n  useEffect(()=>{\n    axios({\n      method: 'get',\n      url: `https://jsonplaceholder.typicode.com/posts`,\n    })\n    .then(response => {\n      setPosts(response.data);\n      setPostsNew(response.data);\n    })\n    .catch(err => {\n       console.log('error', err)\n    })\n\n    axios({\n      method: 'get',\n      url: `https://jsonplaceholder.typicode.com/users`,\n    })\n    .then(response => {\n      setUsers(response.data)\n    })\n    .catch(err => {\n       console.log('error', err)\n    })\n  },[])\n\n  const handleChangeInput =(e)=> {\n      let arr = postsNew.filter(item=>{\n          return item.body.toLowerCase().search(e.target.value.toLowerCase())!== -1;\n      });\n      setPosts(arr);\n  }\n\n  const postsVisible = posts.length !== 0 ? (posts.map(item => {\n    const user = users.find(userItem => userItem.id === item.userId);\n    return (\n      <Post key={item.id}>\n        <PostTitle>{user && user.name} ({user && user.username})</PostTitle>\n        <PostBody>{item.body}</PostBody> \n      </Post>\n    )\n  })) : (\n      <PostIsAbsent>There is no such post. Try again =))</PostIsAbsent>\n  )\n\n  return (\n    <Main>\n      <Input type=\"text\" onChange={handleChangeInput} placeholder=\"Enter part of the post phrase\"/>\n      <Container>\n          {postsVisible}\n      </Container>\n    </Main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}